<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:aop="http://www.springframework.org/schema/aop"
	   xmlns:context="http://www.springframework.org/schema/context"
	   xmlns:tx="http://www.springframework.org/schema/tx" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	   default-lazy-init="true"
	   xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.1.xsd   http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.1.xsd           http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.1.xsd   http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.1.xsd">
	<description>Spring public settings </description>
	<!-- 启用@Aspect支持 -->
	<aop:aspectj-autoproxy proxy-target-class="true"/>

	<!-- 使用annotation 扫描 自动注册bean, 并保证@Required、@Autowired的属性被注入 ,<context:annotation-config/> 就可以被移除了-->
	<!-- 设定Spring 去哪些包中找Annotatio,用于完成对象的注入,管理任务 ,排除@Controller-->
	<context:component-scan base-package="com.frame,net.eoutech,com.spring.jdbc.assistants.interceptor" >
		<context:include-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
	</context:component-scan>


   <!-- 国际化配置 -->
	<bean class="org.springframework.context.support.ResourceBundleMessageSource" id="messageSource">
		<property name="basename" value="messages"/>
	</bean>


	<!-- 配置数据源 -->
	<context:property-placeholder location="classpath:application.properties"/>
	<bean class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close" id="dataSource">
		<!-- config -->
		<property name="driverClass" value="${jdbc.driverClassName}"/>
		<property name="jdbcUrl" value="${jdbc.url}"/>
		<property name="user" value="${jdbc.username}"/>
		<property name="password" value="${jdbc.password}"/>
		
		<!--连接池中保留的最小连接数。 -->
		<property name="minPoolSize" value="10"/>
		<!--连接池中保留的最大连接数。Default: 15 -->
		<property name="maxPoolSize" value="50"/>
		<!--初始化时获取的连接数，取值应在minPoolSize与maxPoolSize之间。Default: 3 -->
		<property name="initialPoolSize" value="10"/>
		<!--最大空闲时间,60秒内未使用则连接被丢弃。若为0则永不丢弃。Default: 0 -->
		<property name="maxIdleTime" value="60"/>
		<!--当连接池中的连接耗尽的时候c3p0一次同时获取的连接数。Default: 3 -->
		<property name="acquireIncrement" value="5"/>
		<!--JDBC的标准参数，用以控制数据源内加载的PreparedStatements数量。但由于预缓存的statements 属于单个connection而不是整个连接池。所以设置这个参数需要考虑到多方面的因素。 
			如果maxStatements与maxStatementsPerConnection均为0，则缓存被关闭。Default: 0 -->
		<property name="maxStatements" value="0"/>
		<!--每60秒检查所有连接池中的空闲连接。Default: 0 -->
		<property name="idleConnectionTestPeriod" value="60"/>
		<!--定义在从数据库获取新连接失败后重复尝试的次数。Default: 30 -->
		<property name="acquireRetryAttempts" value="30"/>
		<!--获取连接失败将会引起所有等待连接池来获取连接的线程抛出异常。但是数据源仍有效 保留，并在下次调用getConnection()的时候继续尝试获取连接。如果设为true，那么在尝试 
			获取连接失败后该数据源将申明已断开并永久关闭。Default: false -->
		<property name="breakAfterAcquireFailure" value="false"/>
		<!--因性能消耗大请只在需要的时候使用它。如果设为true那么在每个connection提交的 时候都将校验其有效性。建议使用idleConnectionTestPeriod或automaticTestTable 
			等方法来提升连接测试的性能。Default: false -->
		<property name="testConnectionOnCheckout" value="true"/>
	</bean>

	<!-- 配置Jdbc模板 -->
	<bean class="org.springframework.jdbc.core.JdbcTemplate" id="jdbcTemplate">
		<property name="dataSource" ref="dataSource"/>
	</bean>



	<!-- Jdbc模板 通用dao  工具助手  具体使用说明: http://git.oschina.net/selfly/dexcoder-assistants -->
	<bean id="jdbcDao" class="com.spring.jdbc.assistants.persistence.JdbcDao">
		<property name="jdbcTemplate" ref="jdbcTemplate"/>
	</bean>


	<!-- 配置事务-->
	<bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"/>
	</bean>
	<tx:advice id="txAdvice" transaction-manager="txManager">
		<tx:attributes>
			<tx:method name="*" propagation="REQUIRED" />
			<!-- 让所有的方法都加入事务管理，为了提高效率，可以把一些查询之类的方法设置为只读的事务 -->
			<tx:method name="find*" propagation="REQUIRED" read-only="true"/>
			<tx:method name="query*" propagation="REQUIRED" read-only="true"/>
			<tx:method name="load*" propagation="REQUIRED" read-only="true"/>
			<tx:method name="get*" propagation="REQUIRED" read-only="true"/>
		</tx:attributes>
	</tx:advice>
	<aop:config>
		<!-- 以下的事务是声明在DAO中，但是通常都会在Service来处理多个业务对象逻辑的关系，注入删除，更新等，此时如果在执行了一个步骤之后抛出异常
            就会导致数据不完整，所以事务不应该在DAO层处理，而应该在service，这也就是Spring所提供的一个非常方便的工具，声明式事务 -->
		<aop:pointcut id="daoMethod" expression="execution(* com.frame..service..*Service.*(..)) || execution(* net.eoutech..service..*Service.*(..))" />
		<aop:advisor advice-ref="txAdvice" pointcut-ref="daoMethod"/>
	</aop:config>

	<!--  这里申明的id必须为multipartResolver,文件上传解析器,文件上传支持  -->
	<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<property name="defaultEncoding" value="UTF-8"/>
		<!-- 内存缓存1M -->
		<property name="maxInMemorySize" value="1048576"/>
		<!-- 上传文件,最大1GB -->
		<property name="maxUploadSize" value="1073741824"/>
	</bean>


	<!-- 定时器：更新用户/设备离线状态 -->
 	<bean class="net.eoutech.task.TimerUpdateStatus" id="timerUpdateStatusJob"/> 
 	<bean class="net.eoutech.task.GiveTask" id="giveTaskJob"/>
 	<bean class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean" id="timerUpdateStatusDetail">
	    <property name="concurrent" value="false"/>     
	    <property name="targetObject">  
	        <ref bean="timerUpdateStatusJob"/>  
	    </property>  
	    <property name="targetMethod">  
	        <value>run</value>  
	    </property>  
	</bean>
	<bean class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean" id="giveTaskDetail">
		<property name="concurrent" value="false"/>
		<property name="targetObject">
			<ref bean="giveTaskJob"/>
		</property>
		<property name="targetMethod">
			<value>begin</value>
		</property>
	</bean>
	<bean class="org.springframework.scheduling.quartz.CronTriggerFactoryBean" id="timerUpdateStatus">  
	    <property name="jobDetail">  
	        <ref bean="timerUpdateStatusDetail"/>  
	    </property>  
	    <property name="cronExpression">  
	        <value>0 0/2 * * * ?</value>  <!--每两分钟触发一次-->
	    </property>  
	</bean>
	<bean class="org.springframework.scheduling.quartz.CronTriggerFactoryBean" id="giveTask">
	    <property name="jobDetail">
	        <ref bean="giveTaskDetail"/>
	    </property>
	    <property name="cronExpression">
	        <!--<value>0 0 1 * * ?</value>&lt;!&ndash;原来每天凌晨一点触发？&ndash;&gt;-->
			<value>0 0/1 * * * ?</value><!--改成每一分钟触发一次  试试会有什么效果-->
	    </property>
	</bean>

 	<!-- 调度工厂 -->  
	<bean class="org.springframework.scheduling.quartz.SchedulerFactoryBean" id="quertzScheduler">  
    	<property name="triggers">  
        	<list>  
            	<ref bean="timerUpdateStatus"/> 
            	<ref bean="giveTask"/>
        	</list>
    	</property>  
	</bean>    

</beans>